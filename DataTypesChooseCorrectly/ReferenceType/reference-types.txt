Reference types
 - Reference types include arrays, classes, and strings.  
 -  Reference types are treated differently from value types with regards to the way values are stored when the application is executing.

 How reference types are different from value types

  - A value type variable will store its values directly in an area of storage called the stack.
  - The stack is memory allocated to the code that is currently running on the CPU  (also known as the stack frame, or activation frame).
  - When the stack frame has finished executing, the values in the stack are removed.

  - A reference type variable will store its values in a separate memory region called the heap. 
  - Reference types can hold large values, and a new instance of a reference type is created using the new operator.
  -  The heap is a memory area that is shared across many applications running on the operating system at the same time. 
  -  Reference type variables hold a reference (the memory address) to the actual value stored in the heap.
  - The .NET Runtime communicates with the operating system to determine what memory addresses are available, and requests an address where it can store the value. 
  - The .NET Runtime stores the value, and then returns the memory address to the variable. 
  - When your code uses the variable, the .NET Runtime seamlessly looks up the address stored in the variable, and retrieves the value that's stored there.


  int[] data;
  - At this point, data is merely a variable that could hold a reference, or rather, a memory address of a value in the heap. Because it's not pointing to a memory address, it's called a null reference.

Create an instance of int array using the new keyword
	int[] data = new int[3];
- The new keyword informs .NET Runtime to create an instance of int array, and then coordinate with the operating system to store it in memory. 
- The .NET Runtime complies, and returns a memory address of the new int array. 
-  Finally, the memory address is stored in the variable data. 
- The int array's elements default to the value 0, because that is the default value of an int.

Why is the C# string data type different?
 - The string data type is also a reference type. 
 - Because the string data type is used so frequently, we can use this format:
		string shortenedString = "Hello World!";
		Console.WriteLine(shortenedString);
 - Behind the scenes, however, a new instance of System.String is created and initialized to "Hello World!".
