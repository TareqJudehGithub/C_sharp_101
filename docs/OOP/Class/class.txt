
 Class
  - A class is blueprint for creating objects.
  - Objects are also called instance of the class.
  - With a class, we can create our own custom type.
  - A class defines a type of object.
  - Classes applies the `Single Responsibility` principle: where each unit has 
    only one responsibility.

  - A class has fields and properties. Like member variables. e.g. string properties.
  - A class has actions or abilities. like functions and methods.
  - Fields and properties are like the class nouns, while methods are like verbs.
  - Fields, constants, and properties represent the state of a class.
  - Methods represents the behavior or a class.
  
  - Inheritance is possible in classes.

  - Classes can be used as data type.
  - {get;} Meaning this is a property and it is only get-able.
  - Classes support two access modifiers: Internal and public.
  - Classes support four modifiers: static, abstract, sealed, and partial.
  - A class is declared by using the class keyword, followed by an identifier (className).
      class Car {

      }
  -  A class should have a single responsibility.

  - Parent-Child classes
      public class Product {

      }
      public class DomesticProduct: Product
      {
      }
      - In the above example, Product is a parent class, and DomesticProduct
        is a child.
      - All parent class fields are inherited in the child class.
      - 
  - In non child classes we need first to instantiate an new object before accessing
    fields.
    
  - Members:
    A class can contain properties and methods, and these are called Members
    of that class:
     - Fields.        Stores data.
     - Methods.       Manipulate fields.
     - Constructors.  Initializes fields.