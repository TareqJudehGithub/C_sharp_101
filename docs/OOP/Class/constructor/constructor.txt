Constructor
 What is a constructor?
  - A special method of the class, which initializes the fields of the class.
  - The constructor is automatically called when an instance of a class is created.
  - constructors have the same name of the class, and may or may not accept parameters.

  - Inside a constructor, we initialize the state of a type.
  - The constructor can have any additional initialization logic that helps in 
    creating an object for the class.
  - Constructors do not return any type, like the case of methods.

 Rules of a constructor
  - When creating the constructor, that constructor should have the class name
    as it's name as well.
        public class Car {
          // fields

          // constructor
          public Car() 
          {

          }
        }
  - The constructor access modifiers are same as the fields.
    - private, protected, private protected, Internal, Internal protected, and public.
  - It is recommended to create the constructor with internal or public access modifiers.
  - The constructor has only one modifier:  static  or (default no keyword).
  
  - A constructor name should be identical with the class name.
  - A constructor does not return any value.
  - A constructor can receive one or more parameter optionally.
  - Inside the constructor we can initialize the declared fields/properties in 
    the class.
  
  - Default Constructors
    - If the developer does not create a constructor, the complier automatically
      creates a default constructor with no parameters.
    - A default constructor is one without any parameter (parameterless constructor) 

  - If values were provided for fields or properties while creating new objects, these 
    values will override any value from the constructor. 
     
  - We can create multiple constructors in the same class.
  - All constructors in the same class, must have different types parameters 
    and fields.
  - Providing values values to fields in the constructor, overrides assigned fields
  values provided when initializing these fields values.
 - Using the 'this' keyword with constructors
  - 'this' keyword can be used with constructors to minimize fields/properties
    initialization duplication inside a constructor.
     Example
      class MyClass(
        string _a;
        string _b;
        string _c;
        string _d;

        MyClass(string a, string b)
        {
          this._a = a;
          this._b = b;
        }

        MyClass(string a, string b, string c, string d) : this(a, b)
        {
          this._c = c;
          this._d = d;
        }
      )

  




   