Data conversion

To perform data conversion, you can use one of several techniques:

Use a helper method on the data type
Use a helper method on the variable
Use the Convert class' methods

 implicit conversion. 
  - Implicit casting is converting from a lower numerical type to a higher one.
  - Implicit conversion is handled by the compiler.
  - Implicit conversion causes no data loss. like converting from int to decimal.
      int myInt = 3;
      decimal myIntDec = 3M;

      Console.WriteLine((decimal)myInt);
      Console.WriteLine(myIntDec);

  - Since any int value can easily fit inside of a decimal, the compiler performs 
    the conversion.

Narrowing(Explicit) conversion 
 - The term narrowing conversion means that you're attempting to convert a value 
   from a data type that can hold more information to a data type that can hold less 
   information. like converting from decimal to int.
 - When you know you'll be performing a narrowing conversion, you'll need to perform 
   a cast expression (casting). 
 - Casting is an instruction to the C# compiler that you know precision may be lost, 
   but you're willing to accept it.
 - To perform a cast, you use the casting operator  () to surround a data type,  then
   place it next to the variable you want to convert. int var = (decimal) var;

Use ToString() to convert a number to a string
 - Every data type variable has a ToString()
    int first = 5;
    int second = 7;
    string message = first.ToString() + second.ToString();
    Console.WriteLine(message);

Explicitly converting a string to a number
 - Most of the numeric data types have a Parse() method, which will convert a string 
   into the given data type.
    string first = "5";
    string second = "7";
    int sum = int.Parse(first) + int.Parse(second);
    Console.WriteLine(sum);

Data Conversion using the Convert class
 - Convert class converts a value from one type into another.
 - when should we use the Convert class? 
   - The Convert class is best for converting fractional numbers into whole 
     numbers (int) because it rounds up the way you would expect.
   
    string value1 = "5";
    string value2 = "7";
    int result = Convert.ToInt32(value1) * Convert.ToInt32(value2);
    Console.WriteLine(result);

Casting versus Conversion
 - The following example demonstrates what happens when you attempt to cast a decimal 
   into an int (a narrowing conversion) versus using the Convert.ToInt32() method to 
   convert the same decimal into an int.

  int value = (int)1.5m; // casting truncates
  Console.WriteLine(value);

  int value2 = Convert.ToInt32(1.5m); // converting rounds up
  Console.WriteLine(value2);
  >>> $ 1
  >>> $ 2

  - When casting, the value of the float is truncated, meaning the value after the 
    decimal is ignored completely.
  - We could change the literal float to 1.999m and the result of casting would be the 
    same.

  - When converting using Convert.ToInt32(), the literal float value is properly 
    rounded up to 2. 
  - If we changed the literal value to 1.499m, it would be rounded down to 1.
 
 - Use the Convert class when you want to perform a narrowing conversion, but want to 
   perform rounding, not a truncation of information.